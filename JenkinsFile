pipeline {
    agent any

    environment {
        CONTAINER_NAME = 'cwpp_container'
        IMAGE_NAME = 'cwpp'
        PORT_MAPPING = '8000:8000'
        GITHUB_REPO_URL = 'https://github.com/shreyasdeodhare/byteBardBazaar.git'
        DOCKERHUB_REPO = 'ssddev007/bytebardbazar'
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                script {
                    try {
                        git branch: 'master', url: "${GITHUB_REPO_URL}"
                    } catch (Exception checkoutError) {
                        error("Failed to checkout source code: ${checkoutError.message}")
                    }
                }
            }
        }

        

        stage('SonarQube Analysis') {
            steps {
                script {
                    try {
                        // SonarQube analysis command
                        bat "sonar-scanner -Dsonar.projectKey=squ_f42dcb9d6c7a053903d0d65abaf756fec86546d1 -Dsonar.sources=. -Dsonar.login=admin -Dsonar.password=shreyas"
                    } catch (Exception sonarError) {
                        error("Failed to perform SonarQube analysis: ${sonarError.message}")
                    }
                }
            }
        }

        stage('Build or Pull Docker Image') {
            steps {
                script {
                    try {
                        def imageExists = bat(script: "docker images ${IMAGE_NAME} | findstr ${IMAGE_NAME}", returnStatus: true) == 0

                        if (imageExists) {
                            echo "Using existing Docker image."
                        } else {
                            bat "docker build -t ${IMAGE_NAME} ."
                        }
                    } catch (Exception buildError) {
                        error("Failed to build or pull Docker image: ${buildError.message}")
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    try {
                        bat "docker run -p ${PORT_MAPPING} --name ${CONTAINER_NAME} ${IMAGE_NAME}"
                    } catch (Exception runError) {
                        error("Failed to run Docker container: ${runError.message}")
                    }
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    try {
                        // Login to Docker Hub
                        bat "docker login -u shreyasdeodhare18@gmail.com -p Shreyas189"

                        // Tag the Docker image for Docker Hub repository
                        bat "docker tag ${IMAGE_NAME} ${DOCKERHUB_REPO}:${BUILD_NUMBER}"

                        // Push the Docker image to Docker Hub
                        bat "docker push ${DOCKERHUB_REPO}:${BUILD_NUMBER}"
                    } catch (Exception pushError) {
                        error("Failed to push Docker image to Docker Hub: ${pushError.message}")
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                try {
                    bat "docker stop ${CONTAINER_NAME} && docker rm ${CONTAINER_NAME}"
                } catch (Exception cleanupError) {
                    echo "Failed to stop and remove the Docker container: ${cleanupError.message}"
                }
            }
        }
    }
}
